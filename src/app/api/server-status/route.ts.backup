import { NextRequest, NextResponse } from 'next/server';
import { ServerStatus, ServerStatusResponse } from '@/types/server-status';

// 【本番環境での変更点3B】
// 現在は外部APIを使用していますが、以下の方法で直接サーバーにクエリを送信することも可能です：
// 
// 1. mcstatus パッケージ（Node.js環境で推奨）
// 2. minecraft-server-util（非推奨）
// 3. 独自のMinecraftプロトコル実装
// 
// 本番環境では安定性を考慮し、外部APIを使用しています

/* 【代替実装例】mcstatus パッケージを使用した直接サーバークエリ
async function fetchServerStatusDirect(address: string): Promise<ServerStatus> {
  const startTime = Date.now();
  
  try {
    const mcstatus = await import('mcstatus');
    const [host, portStr] = address.split(':');
    const port = parseInt(portStr || '25565');
    
    // mcstatus パッケージの使用例（正確な型定義が必要）
    // const result = await mcstatus.status({ host, port });
    // 
    // return {
    //   online: result.online,
    //   players: {
    //     online: result.players.online,
    //     max: result.players.max
    //   },
    //   version: result.version.name,
    //   motd: result.motd.clean,
    //   ping: Date.now() - startTime,
    //   lastChecked: new Date().toISOString()
    // };
    
    throw new Error('Direct server query not implemented');
  } catch (error) {
    console.error('Direct server query failed:', error);
    throw error;
  }
}
*/

// Minecraft サーバーステータスを取得する関数
async function fetchMinecraftServerStatus(address: string): Promise<ServerStatus> {
  const startTime = Date.now();
  
  for (let attempt = 1; attempt <= 2; attempt++) {
    try {
      // 【方法1】外部API（mcsrvstat.us）を使用（推奨）
      const response = await fetch(`https://api.mcsrvstat.us/3/${address}`, {
        headers: {
          'User-Agent': 'IneServer-Homepage/1.0'
        },
        signal: AbortSignal.timeout(10000)
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }

      const data: ServerStatusResponse = await response.json();
      const ping = Date.now() - startTime;

      if (data.online) {
        return {
          online: true,
          players: {
            online: data.players?.online || 0,
            max: data.players?.max || 0
          },
          version: data.version || 'Unknown',
          motd: data.motd?.clean?.[0] || data.motd?.raw?.[0] || 'Minecraft Server',
          icon: data.icon,
          ping: ping,
          lastChecked: new Date().toISOString()
        };
      } else {
        // デバッグ情報をログに出力
        console.log(`Server appears offline (attempt ${attempt}). Debug info:`, data.debug);
        
        // 最初の試行が失敗した場合は再試行
        if (attempt === 1) {
          console.log('Retrying server status check...');
          await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
          continue;
        }
        
        return {
          online: false,
          players: {
            online: 0,
            max: 0
          },
          version: 'Unknown',
          motd: data.debug?.error?.ping || data.debug?.error?.query || 'Server Offline',
          ping: ping,
          lastChecked: new Date().toISOString()
        };
      }
    } catch (error) {
      console.error(`Failed to fetch server status (attempt ${attempt}):`, error);
      
      // 最初の試行が失敗した場合は再試行
      if (attempt === 1) {
        console.log('Retrying server status check...');
        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
        continue;
      }
      
      // 2回目の試行でも失敗した場合はエラー状態を返す
      return {
        online: false,
        players: {
          online: 0,
          max: 0
        },
        version: 'Unknown',
        motd: 'Connection Failed',
        ping: Date.now() - startTime,
        lastChecked: new Date().toISOString()
      };
    }
  }

  // この行は到達しないはずですが、TypeScriptの型チェックのために追加
  return {
    online: false,
    players: { online: 0, max: 0 },
    version: 'Unknown',
    motd: 'Unknown Error',
    ping: Date.now() - startTime,
    lastChecked: new Date().toISOString()
  };
}

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  // 【本番環境での変更点4】
  // 環境変数を使用することで、デプロイ時の設定変更を不要にします
  // ローカル環境: MINECRAFT_SERVER_ADDRESS=localhost:25565
  // 本番環境: MINECRAFT_SERVER_ADDRESS=play.ineserver.com
  const address = searchParams.get('address') || process.env.MINECRAFT_SERVER_ADDRESS || 'localhost:25565';

  try {
    const status = await fetchMinecraftServerStatus(address);
    
    return NextResponse.json(status, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    });
  } catch (error) {
    console.error('Server status API error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to fetch server status',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
