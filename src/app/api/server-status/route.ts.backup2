import { NextRequest, NextResponse } from 'next/server';
import { ServerStatus } from '@/types/server-status';
import * as mc from 'minecraft-protocol';
import type { OldPingResult, NewPingResult } from 'minecraft-protocol';

// 内部でMinecraftサーバーに直接クエリを送信する実装
async function fetchMinecraftServerStatus(address: string): Promise<ServerStatus> {
  const startTime = Date.now();
  
  try {
    // アドレスとポートを分割
    const [host, portStr] = address.split(':');
    const port = parseInt(portStr || '25565');
    
    console.log(`Attempting to connect to Minecraft server: ${host}:${port}`);
    
    // Minecraft サーバーにpingを送信
    const response = await new Promise<OldPingResult | NewPingResult>((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        reject(new Error('Ping timeout'));
      }, 10000);
      
      mc.ping({ host, port }, (err, result) => {
        clearTimeout(timeoutId);
        if (err) {
          reject(err);
        } else {
          resolve(result as OldPingResult | NewPingResult);
        }
      });
    });
    
    const ping = Date.now() - startTime;
    console.log(`Server ping successful in ${ping}ms:`, response);
    
    // レスポンスの構造を確認してパース
    let motd = 'Minecraft Server';
    let players = { online: 0, max: 0 };
    let version = { name: 'Unknown' };
    if (response && typeof response === 'object') {
      if ('description' in response) {
        const description = response.description;
        motd = typeof description === 'string' ? description : description?.text || 'Minecraft Server';
      }
      if ('players' in response && response.players) {
        players = response.players;
      }
      if ('version' in response && response.version) {
        if (typeof response.version === 'object' && 'name' in response.version) {
          version = { name: response.version.name };
        } else {
          version = { name: 'Unknown' };
        }
      }
    }
    
    return {
      online: true,
      players: {
        online: players.online || 0,
        max: players.max || 0
      },
      version: version.name || 'Unknown',
      motd: motd,
      ping: ping,
      lastChecked: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('Failed to ping Minecraft server:', error);
    
    // エラー時はオフライン状態を返す
    return {
      online: false,
      players: {
        online: 0,
        max: 0
      },
      version: 'Unknown',
      motd: 'Connection Failed',
      ping: Date.now() - startTime,
      lastChecked: new Date().toISOString()
    };
  }
}
    try {
      // 【方法1】外部API（mcsrvstat.us）を使用（推奨）
      const response = await fetch(`https://api.mcsrvstat.us/3/${address}`, {
        headers: {
          'User-Agent': 'IneServer-Homepage/1.0'
        },
        signal: AbortSignal.timeout(10000)
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }

      const data: ServerStatusResponse = await response.json();
      const ping = Date.now() - startTime;

      if (data.online) {
        return {
          online: true,
          players: {
            online: data.players?.online || 0,
            max: data.players?.max || 0
          },
          version: data.version || 'Unknown',
          motd: data.motd?.clean?.[0] || data.motd?.raw?.[0] || 'Minecraft Server',
          icon: data.icon,
          ping: ping,
          lastChecked: new Date().toISOString()
        };
      } else {
        // デバッグ情報をログに出力
        console.log(`Server appears offline (attempt ${attempt}). Debug info:`, data.debug);
        
        // 最初の試行が失敗した場合は再試行
        if (attempt === 1) {
          console.log('Retrying server status check...');
          await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
          continue;
        }
        
        return {
          online: false,
          players: {
            online: 0,
            max: 0
          },
          version: 'Unknown',
          motd: data.debug?.error?.ping || data.debug?.error?.query || 'Server Offline',
          ping: ping,
          lastChecked: new Date().toISOString()
        };
      }
    } catch (error) {
      console.error(`Failed to fetch server status (attempt ${attempt}):`, error);
      
      // 最初の試行が失敗した場合は再試行
      if (attempt === 1) {
        console.log('Retrying server status check...');
        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
        continue;
      }
      
      // 2回目の試行でも失敗した場合はエラー状態を返す
      return {
        online: false,
        players: {
          online: 0,
          max: 0
        },
        version: 'Unknown',
        motd: 'Connection Failed',
        ping: Date.now() - startTime,
        lastChecked: new Date().toISOString()
      };
    }
  }

  // この行は到達しないはずですが、TypeScriptの型チェックのために追加
  return {
    online: false,
    players: { online: 0, max: 0 },
    version: 'Unknown',
    motd: 'Unknown Error',
    ping: Date.now() - startTime,
    lastChecked: new Date().toISOString()
  };
}

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  // 【本番環境での変更点4】
  // 環境変数を使用することで、デプロイ時の設定変更を不要にします
  // ローカル環境: MINECRAFT_SERVER_ADDRESS=localhost:25565
  // 本番環境: MINECRAFT_SERVER_ADDRESS=play.ineserver.com
  const address = searchParams.get('address') || process.env.MINECRAFT_SERVER_ADDRESS || 'localhost:25565';

  try {
    const status = await fetchMinecraftServerStatus(address);
    
    return NextResponse.json(status, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    });
  } catch (error) {
    console.error('Server status API error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to fetch server status',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
